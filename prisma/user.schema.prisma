generator client {
  provider      = "prisma-client-js"
  output        = "./user"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  userId    Int      @id @default(autoincrement()) @map("user_id")
  username  String   @unique @map("username")
  password  String   @map("password")
  money     Int      @default(10000) @map("name")
  rating    Int      @default(1000) @map("rating")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  Team      Team[]
  Inventory Inventory[]
  MatchQueue MatchQueue[]

  @@map("User")
}

model Team {
  teamId Int @id @default(autoincrement()) @map("team_id")
  // teamPower Int @default(0)

  User   User @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  UserId Int  @map("user_id")

  Inventory   Inventory @relation(fields: [InventoryId], references: [inventoryId], onDelete: Cascade)
  InventoryId Int       @map("inventory_id")

  @@map("Team")
}

model Inventory {
  inventoryId Int @id @default(autoincrement()) @map("inventory_id")
  count       Int @map("count")
  level       Int @map("level")

  User   User @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  UserId Int  @map("user_id")

  PlayerId Int @map("player_id")

  Team Team[]

  @@map("Inventory")
}

model MatchQueue {
  matchId Int @id @default(autoincrement()) @map("match_id")

  User   User @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  UserId Int  @map("user_id")
}
